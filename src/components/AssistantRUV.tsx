import React, { useState, useRef, useEffect } from "react";

async function getRUVResponse(input: string): Promise<string> {
  try {
    const res = await fetch("http://localhost:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "llama3",
        prompt: `–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ–±–µ–ª–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –≤–µ—Ä–Ω–∏ JSON –≤–∏–¥–∞ {\"type\":\"—à–∫–∞—Ñ\",\"width\":120,\"height\":200,\"depth\":60,\"material\":\"oak\"} –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å —Ç–µ–∫—Å—Ç–æ–º. –ó–∞–ø—Ä–æ—Å: ${input}`,
        stream: false
      })
    });
    const data = await res.json();
    return data.response || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.";
  } catch (e) {
    return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama.";
  }
}

export const AssistantRUV: React.FC = () => {
  const [messages, setMessages] = useState([
    { from: "ruv", text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –†–£–í ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ–±–µ–ª–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?" }
  ]);
  const [input, setInput] = useState("");
  const chatRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    chatRef.current?.scrollTo(0, chatRef.current.scrollHeight);
  }, [messages]);

  const send = async () => {
    if (!input.trim()) return;
    setMessages((msgs) => [...msgs, { from: "user", text: input }]);
    setInput("");
    setMessages((msgs) => [...msgs, { from: "ruv", text: "–ü–µ—á–∞—Ç–∞—é –æ—Ç–≤–µ—Ç..." }]);
    const aiResponse = await getRUVResponse(input);

    // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    let modelParams = null;
    try {
      modelParams = JSON.parse(aiResponse);
    } catch {}

    if (modelParams && modelParams.type) {
      // –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D-–º–æ–¥–µ–ª–∏ –Ω–∞ —Å—Ü–µ–Ω–µ
      window.create3DModelFromAI?.(modelParams);
      setMessages((msgs) => [
        ...msgs.slice(0, -1),
        { from: "ruv", text: `–°–æ–∑–¥–∞—é ${modelParams.type} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: —à–∏—Ä–∏–Ω–∞ ${modelParams.width}, –≤—ã—Å–æ—Ç–∞ ${modelParams.height}, –≥–ª—É–±–∏–Ω–∞ ${modelParams.depth}, –º–∞—Ç–µ—Ä–∏–∞–ª ${modelParams.material}` }
      ]);
    } else {
      setMessages((msgs) => [
        ...msgs.slice(0, -1),
        { from: "ruv", text: aiResponse }
      ]);
    }
  };

  return (
    <div className="fixed bottom-6 right-6 bg-white rounded-xl shadow-2xl w-96 max-w-full z-50">
      <div className="bg-orange-500 text-white px-4 py-2 rounded-t-xl font-bold flex justify-between items-center">
        ü§ñ –†–£–í ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
      </div>
      <div ref={chatRef} className="p-4 h-64 overflow-y-auto">
        {messages.map((msg, i) => (
          <div
            key={i}
            className={`mb-2 ${msg.from === "ruv" ? "text-left" : "text-right"}`}
          >
            <span
              className={`inline-block px-3 py-2 rounded-lg ${
                msg.from === "ruv"
                  ? "bg-gray-100 text-gray-800"
                  : "bg-orange-100 text-orange-800"
              }`}
            >
              {msg.text}
            </span>
          </div>
        ))}
      </div>
      <div className="flex border-t p-2">
        <input
          className="flex-1 border rounded-l-lg px-3 py-2 outline-none"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && send()}
          placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –†–£–í..."
        />
        <button
          className="bg-orange-500 text-white px-4 py-2 rounded-r-lg"
          onClick={send}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </div>
    </div>
  );
}; 