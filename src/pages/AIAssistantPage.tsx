import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Lightbulb, Sparkles, Download, Share2, Copy } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Avatar, AvatarFallback } from '../components/ui/avatar';
import { Badge } from '../components/ui/badge';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  suggestions?: string[];
}

interface Suggestion {
  id: string;
  title: string;
  description: string;
  category: string;
}

export const AIAssistantPage: React.FC = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const suggestions: Suggestion[] = [
    {
      id: '1',
      title: '–ü–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      description: '–ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞?',
      category: '–º–∞—Ç–µ—Ä–∏–∞–ª—ã'
    },
    {
      id: '2',
      title: '–†–∞–∑–º–µ—Ä—ã –º–µ–±–µ–ª–∏',
      description: '–ö–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –Ω–∞ 6 —á–µ–ª–æ–≤–µ–∫?',
      category: '—Ä–∞–∑–º–µ—Ä—ã'
    },
    {
      id: '3',
      title: '–°—Ç–∏–ª–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è',
      description: '–ü–æ–º–æ–≥–∏ —Å–æ–∑–¥–∞—Ç—å –º–µ–±–µ–ª—å –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ',
      category: '—Å—Ç–∏–ª—å'
    },
    {
      id: '4',
      title: '–¶–≤–µ—Ç–æ–≤—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è',
      description: '–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å —Ç–µ–º–Ω—ã–º –¥—É–±–æ–º?',
      category: '—Ü–≤–µ—Ç'
    }
  ];

  const welcomeMessage: Message = {
    id: 'welcome',
    type: 'assistant',
    content: `–ü—Ä–∏–≤–µ—Ç, ${user?.name}! –Ø –†–£–í - –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–∏–∑–∞–π–Ω—É –º–µ–±–µ–ª–∏. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤, —Å—Ç–∏–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    timestamp: new Date(),
    suggestions: suggestions.map(s => s.description)
  };

  useEffect(() => {
    if (messages.length === 0) {
      setMessages([welcomeMessage]);
    }
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: crypto.randomUUID(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
    setTimeout(() => {
      const aiResponse = generateAIResponse(inputValue);
      const assistantMessage: Message = {
        id: crypto.randomUUID(),
        type: 'assistant',
        content: aiResponse.content,
        timestamp: new Date(),
        suggestions: aiResponse.suggestions
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateAIResponse = (input: string): { content: string; suggestions?: string[] } => {
    const lowerInput = input.toLowerCase();
    
    if (lowerInput.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || lowerInput.includes('–¥–µ—Ä–µ–≤–æ') || lowerInput.includes('–º–µ—Ç–∞–ª–ª')) {
      return {
        content: '–î–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:\n\nüå≥ **–î–µ—Ä–µ–≤–æ**: –î—É–± –∏ —è—Å–µ–Ω—å –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å—Ç–æ–ª–µ—à–Ω–∏—Ü - –ø—Ä–æ—á–Ω—ã–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ. –°–æ—Å–Ω–∞ —Ö–æ—Ä–æ—à–∞ –¥–ª—è –∫–∞—Ä–∫–∞—Å–æ–≤.\n\nüîß **–ú–µ—Ç–∞–ª–ª**: –ù–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è, —á—É–≥—É–Ω –¥–ª—è –ª–æ—Ñ—Ç–∞.\n\nüí° **–°–æ–≤–µ—Ç**: –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞ —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–∂–∫–∞–º–∏ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç.',
        suggestions: [
          '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ–π—Å—Ç–≤–∞ –¥—É–±–∞',
          '–ö–∞–∫–∏–µ –≤–∏–¥—ã –º–µ—Ç–∞–ª–ª–∞ –ª—É—á—à–µ –¥–ª—è –Ω–æ–∂–µ–∫ —Å—Ç–æ–ª–∞?',
          '–ö–∞–∫ —Å–æ—á–µ—Ç–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏ –º–µ—Ç–∞–ª–ª?'
        ]
      };
    }
    
    if (lowerInput.includes('—Ä–∞–∑–º–µ—Ä') || lowerInput.includes('—Å—Ç–æ–ª') || lowerInput.includes('—Å—Ç—É–ª')) {
      return {
        content: '–í–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–µ–±–µ–ª–∏:\n\nüìè **–û–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª**:\n‚Ä¢ –ù–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞: 120x80 —Å–º\n‚Ä¢ –ù–∞ 6 —á–µ–ª–æ–≤–µ–∫: 160x90 —Å–º\n‚Ä¢ –ù–∞ 8 —á–µ–ª–æ–≤–µ–∫: 200x100 —Å–º\n‚Ä¢ –í—ã—Å–æ—Ç–∞: 72-75 —Å–º\n\nü™ë **–°—Ç—É–ª—å—è**:\n‚Ä¢ –í—ã—Å–æ—Ç–∞ —Å–∏–¥–µ–Ω—å—è: 42-45 —Å–º\n‚Ä¢ –®–∏—Ä–∏–Ω–∞: 40-50 —Å–º\n‚Ä¢ –ì–ª—É–±–∏–Ω–∞: 40-45 —Å–º\n\nüí° **–í–∞–∂–Ω–æ**: –û—Å—Ç–∞–≤–ª—è–π—Ç–µ 60 —Å–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.',
        suggestions: [
          '–ö–∞–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏?',
          '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏',
          '–†–∞–∑–º–µ—Ä—ã –¥–µ—Ç—Å–∫–æ–π –º–µ–±–µ–ª–∏'
        ]
      };
    }
    
    if (lowerInput.includes('—Å—Ç–∏–ª—å') || lowerInput.includes('—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π') || lowerInput.includes('–º–∏–Ω–∏–º–∞–ª–∏–∑–º')) {
      return {
        content: '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:\n\nüé® **–¶–≤–µ—Ç–∞**: –ë–µ–ª—ã–π, —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π, –±–µ–∂–µ–≤—ã–π –∫–∞–∫ –æ—Å–Ω–æ–≤–∞. –ê–∫—Ü–µ–Ω—Ç—ã - –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞.\n\nüå≥ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã**: –°–≤–µ—Ç–ª—ã–µ –ø–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤–∞ (—Å–æ—Å–Ω–∞, –±–µ—Ä–µ–∑–∞, –¥—É–± –±–µ–ª–µ–Ω—ã–π), –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ç–∫–∞–Ω–∏.\n\n‚ú® **–§–æ—Ä–º—ã**: –ü—Ä–æ—Å—Ç—ã–µ, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.\n\nüí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**: –ú–∏–Ω–∏–º—É–º –¥–µ–∫–æ—Ä–∞, –º–∞–∫—Å–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —É—é—Ç —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—É –∏ —Å–≤–µ—Ç.',
        suggestions: [
          '–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω —Å—Ç—É–ª–∞ –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ',
          '–ö–∞–∫–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
          '–ü—Ä–∏–º–µ—Ä—ã —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–π –º–µ–±–µ–ª–∏'
        ]
      };
    }
    
    return {
      content: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –¥–∏–∑–∞–π–Ω–∞ –º–µ–±–µ–ª–∏:\n\n‚Ä¢ üé® –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n‚Ä¢ üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π\n‚Ä¢ üè† –°—Ç–∏–ª–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã\n‚Ä¢ üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏\n\n–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      suggestions: [
        '–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç–æ–ª–∞',
        '–ö–∞–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –Ω—É–∂–Ω—ã –¥–ª—è –¥–∏–≤–∞–Ω–∞?',
        '–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ'
      ]
    };
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInputValue(suggestion);
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center">
              <Bot className="w-8 h-8 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            AI –ü–æ–º–æ—â–Ω–∏–∫ –†–£–í
          </h1>
          <p className="text-gray-600 dark:text-gray-300">
            –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–π –º–µ–±–µ–ª–∏
          </p>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        {messages.length <= 1 && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
            {suggestions.map((suggestion) => (
              <Card 
                key={suggestion.id} 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleSuggestionClick(suggestion.description)}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{suggestion.title}</CardTitle>
                    <Badge variant="secondary">{suggestion.category}</Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <CardDescription>{suggestion.description}</CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* –ß–∞—Ç */}
        <Card className="min-h-[500px] flex flex-col">
          <CardHeader className="border-b">
            <div className="flex items-center space-x-3">
              <Avatar>
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white">
                  –†–£–í
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="text-lg">–†–£–í AI –ü–æ–º–æ—â–Ω–∏–∫</CardTitle>
                <CardDescription>–û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–∏–∑–∞–π–Ω–æ–º</CardDescription>
              </div>
            </div>
          </CardHeader>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex space-x-3 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <Avatar className="w-8 h-8">
                    <AvatarFallback className={message.type === 'user' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gradient-to-br from-purple-500 to-pink-500 text-white'
                    }>
                      {message.type === 'user' ? <User className="w-4 h-4" /> : '–†–£–í'}
                    </AvatarFallback>
                  </Avatar>
                  
                  <div className={`space-y-2 ${message.type === 'user' ? 'text-right' : 'text-left'}`}>
                    <div
                      className={`inline-block px-4 py-3 rounded-2xl ${
                        message.type === 'user'
                          ? 'bg-blue-500 text-white'
                          : 'bg-white dark:bg-gray-800 border'
                      }`}
                    >
                      <div className="whitespace-pre-wrap">{message.content}</div>
                      
                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ */}
                      {message.type === 'assistant' && (
                        <div className="flex space-x-2 mt-2 pt-2 border-t border-gray-200 dark:border-gray-600">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => copyMessage(message.content)}
                            className="h-6 px-2 text-xs"
                          >
                            <Copy className="w-3 h-3 mr-1" />
                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            className="h-6 px-2 text-xs"
                          >
                            <Share2 className="w-3 h-3 mr-1" />
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                          </Button>
                        </div>
                      )}
                    </div>
                    
                    {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è */}
                    {message.suggestions && (
                      <div className="space-y-1">
                        {message.suggestions.map((suggestion, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            onClick={() => handleSuggestionClick(suggestion)}
                            className="block text-left text-xs h-auto py-2 px-3 whitespace-normal"
                          >
                            <Lightbulb className="w-3 h-3 mr-1 inline flex-shrink-0" />
                            {suggestion}
                          </Button>
                        ))}
                      </div>
                    )}
                    
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      {message.timestamp.toLocaleTimeString('ru-RU', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && (
              <div className="flex justify-start">
                <div className="flex space-x-3">
                  <Avatar className="w-8 h-8">
                    <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white">
                      –†–£–í
                    </AvatarFallback>
                  </Avatar>
                  <div className="bg-white dark:bg-gray-800 border rounded-2xl px-4 py-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </CardContent>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="border-t p-4">
            <div className="flex space-x-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∏–∑–∞–π–Ω–µ –º–µ–±–µ–ª–∏..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                disabled={isLoading}
                className="flex-1"
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isLoading}
                className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">
              –†–£–í –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};
